{{- $component := "core" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "anchore-engine.core.fullname" . }}"
  labels:
    app: "{{ template "anchore-engine.fullname" . }}"
    component: {{ $component }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: "{{ template "anchore-engine.fullname" . }}"
      component: {{ $component }}
  replicas: {{ .Values.anchoreCore.replicaCount }}
  template:
    metadata:
      labels:
        app: "{{ template "anchore-engine.fullname" . }}"
        component: {{ $component }}
{{- if .Values.anchoreCore.annotations }}
      annotations:
{{ toYaml .Values.anchoreCore.annotations | indent 8 }}
{{- end }}
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "anchore-engine.fullname" .}}
        {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseRbac.enabled }}
        - name: anchore-license
          secret:
            secretName: {{ .Values.anchoreEnterpriseGlobal.licenseSecretName }}
        - name: rbac-config-volume
          configMap:
            name: {{ template "anchore-engine.enterprise.fullname" . }}
        {{- end}}
        {{- if .Values.anchoreGlobal.internalServicesSslEnabled }}
        - name: certs
          secret:
            secretName: {{ .Values.anchoreGlobal.internalServicesSsl.certSecret }}
        {{- end }}
      containers:
      - name: {{ .Chart.Name }}-{{ $component }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "apiext"]
        envFrom:
        - secretRef:
            name: {{ template "anchore-engine.fullname" . }}
        - configMapRef:
            name: {{ template "anchore-engine.fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: {{ .Values.service.ports.extApi }}
          name: external-api
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        {{- if .Values.anchoreGlobal.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.anchoreGlobal.internalServicesSsl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
        resources:
{{ toYaml .Values.anchoreCore.resources | indent 10 }}

      - name: {{ .Chart.Name }}-kubernetes-webhook
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-manager"]
        args: ["service", "start", "kubernetes_webhook"]
        envFrom:
        - secretRef:
            name: {{ template "anchore-engine.fullname" . }}
        - configMapRef:
            name: {{ template "anchore-engine.fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - name: k8s-webhook
          containerPort: {{ .Values.service.ports.kubernetesWebhook }}
        volumeMounts:
        - name: config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        {{- if .Values.anchoreGlobal.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.anchoreGlobal.internalServicesSsl.certDir }}
          readOnly: true
        {{- end }}
        livenessProbe:
          httpGet:
            path: /health
            port: k8s-webhook
          initialDelaySeconds: 10
          periodSeconds: 60
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: k8s-webhook
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        resources:
{{ toYaml .Values.anchoreCore.resources | indent 10 }}

      {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseRbac.enabled }}
      - name: {{ .Chart.Name }}-rbac-manager
        image: "{{ .Values.anchoreEnterpriseGlobal.image.repository }}:{{ .Values.anchoreEnterpriseGlobal.image.tag }}"
        imagePullPolicy: {{ .Values.anchoreEnterpriseGlobal.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-enterprise-manager"]
        args: ["service", "start", "rbac_manager"]
        envFrom:
        - secretRef:
            name: {{ template "anchore-engine.fullname" . }}
        - configMapRef:
            name: {{ template "anchore-engine.fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: {{ .Values.anchoreEnterpriseRbac.service.apiPort }}
          name: rbac-manager
        volumeMounts:
        - name: anchore-license
          mountPath: /license.yaml
          subPath: license.yaml
        - name: rbac-config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        {{- if .Values.anchoreGlobal.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.anchoreGlobal.internalServicesSsl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health
            port: rbac-manager
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: rbac-manager
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10

      - name: {{ .Chart.Name }}-rbac-authorizer
        image: "{{ .Values.anchoreEnterpriseGlobal.image.repository }}:{{ .Values.anchoreEnterpriseGlobal.image.tag }}"
        imagePullPolicy: {{ .Values.anchoreEnterpriseGlobal.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-enterprise-manager"]
        args: ["service", "start", "rbac_authorizer"]
        envFrom:
        - secretRef:
            name: {{ template "anchore-engine.fullname" . }}
        - configMapRef:
            name: {{ template "anchore-engine.fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        ports:
        - containerPort: {{ .Values.anchoreEnterpriseRbac.service.authPort }}
          name: rbac-auth
        volumeMounts:
        - name: anchore-license
          mountPath: /license.yaml
          subPath: license.yaml
        - name: rbac-config-volume
          mountPath: /config/config.yaml
          subPath: config.yaml
        {{- if .Values.anchoreGlobal.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.anchoreGlobal.internalServicesSsl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          exec:
            command:
              - curl
              - 'localhost:{{ .Values.anchoreEnterpriseRbac.service.authPort }}/health'
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          exec:
            command:
              - curl
              - 'localhost:{{ .Values.anchoreEnterpriseRbac.service.authPort }}/health'
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
      imagePullSecrets:
      - name: {{ .Values.anchoreEnterpriseGlobal.imagePullSecretName }}
      {{- end }}

      {{- if .Values.anchoreCore.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.anchoreCore.nodeSelector | indent 8 }}
      {{- end }}
      {{- with .Values.anchoreCore.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.anchoreCore.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "anchore-engine.core.fullname" . }}
  labels:
    app: {{ template "anchore-engine.fullname" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    component: {{ $component }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - name: anchore-external-api
      port: {{ .Values.service.ports.extApi }}
      targetPort: {{ .Values.service.ports.extApi }}
      protocol: TCP
    - name: anchore-kubernetes-webhook
      port: {{ .Values.service.ports.kubernetesWebhook }}
      targetPort: {{ .Values.service.ports.kubernetesWebhook }}
      protocol: TCP
  {{- if and .Values.anchoreEnterpriseGlobal.enabled .Values.anchoreEnterpriseRbac.enabled }}
    - name: anchore-rbac-manager
      port: {{ .Values.anchoreEnterpriseRbac.service.apiPort }}
      targetPort: {{ .Values.anchoreEnterpriseRbac.service.apiPort }}
      protocol: TCP
  {{- end }}
  selector:
    app: {{ template "anchore-engine.fullname" . }}
    component: {{ $component }}
