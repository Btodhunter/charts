apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "core.fullname" . }}"
  labels:
    app: "{{ template "fullname" . }}"
    component: core
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: "{{ template "fullname" . }}"
      component: "core"
  replicas: {{ .Values.coreConfig.replicaCount }}
  template:
    metadata:
      labels:
        app: "{{ template "fullname" . }}"
        component: core
{{- if .Values.coreConfig.annotations }}
      annotations:
{{ toYaml .Values.coreConfig.annotations | indent 8 }}
{{- end }}
    spec:
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "core.fullname" .}}
        {{- if .Values.enterpriseConfig.rbac.enabled }}
        - name: anchore-license
          secret:
            secretName: {{ .Values.enterpriseConfig.licenseSecretName }}
        - name: rbac-config-volume
          configMap:
            name: {{ template "anchore-engine.enterprise.fullname" . }}
        {{- end}}
        {{- if .Values.globalConfig.internalServicesSslEnabled }}
        - name: certs
          secret:
            secretName: {{ .Values.coreConfig.ssl.certSecret }}
        {{- end }}
      containers:
      - name: {{ .Chart.Name }}-core
        image: {{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        envFrom:
        - secretRef:
            name: {{ template "fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ANCHORE_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ANCHORE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: {{ .Values.service.ports.api }}
          name: external-api
        - containerPort: {{ .Values.service.ports.queue }}
          name: queue-service
        - containerPort: {{ .Values.service.ports.k8sImagePolicyWebhook }}
          name: webhook-service
        - containerPort: {{ .Values.service.ports.catalog }}
          name: catalog
        - containerPort: {{ .Values.service.ports.policy }}
          name: policy-engine
        volumeMounts:
        - name: config-volume
          mountPath: /config
        {{- if .Values.globalConfig.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.coreConfig.ssl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health
            port: external-api
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: external-api
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
        resources:
{{ toYaml .Values.coreConfig.resources | indent 10 }}

      {{- if .Values.enterpriseConfig.rbac.enabled }}
      - name: {{ .Chart.Name }}-rbac-manager
        image: "{{ .Values.enterpriseConfig.image.repository }}:{{ .Values.enterpriseConfig.image.tag }}"
        imagePullPolicy: {{ .Values.enterpriseConfig.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-enterprise-manager"]
        args: ["service", "start", "--service", "rbac_manager"]
        envFrom:
        - secretRef:
            name: {{ template "fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ANCHORE_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ANCHORE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: {{ .Values.enterpriseConfig.rbac.service.apiPort }}
          name: rbac-manager
        volumeMounts:
        - name: anchore-license
          mountPath: /license.yaml
          subPath: license.yaml
        - name: rbac-config-volume
          mountPath: /config
        {{- if .Values.globalConfig.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.coreConfig.ssl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health
            port: rbac-manager
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: rbac-manager
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10

      - name: {{ .Chart.Name }}-rbac-authorizer
        image: "{{ .Values.enterpriseConfig.image.repository }}:{{ .Values.enterpriseConfig.image.tag }}"
        imagePullPolicy: {{ .Values.enterpriseConfig.image.pullPolicy }}
        command: ["/usr/local/bin/anchore-enterprise-manager"]
        args: ["service", "start", "--service", "rbac_authorizer"]
        envFrom:
        - secretRef:
            name: {{ template "fullname" . }}
        env:
        - name: ANCHORE_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ANCHORE_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ANCHORE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: {{ .Values.enterpriseConfig.rbac.service.authPort }}
          name: rbac-auth
        volumeMounts:
        - name: anchore-license
          mountPath: /license.yaml
          subPath: license.yaml
        - name: rbac-config-volume
          mountPath: /config
        {{- if .Values.globalConfig.internalServicesSslEnabled }}
        - name: certs
          mountPath: {{ default "/certs" .Values.coreConfig.ssl.certDir }}
          readOnly: true
        {{- end }}
        readinessProbe:
          httpGet:
            path: /health
            port: rbac-auth
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 10
        livenessProbe:
          httpGet:
            path: /health
            port: rbac-auth
          timeoutSeconds: 10
          initialDelaySeconds: 60
          periodSeconds: 30
          failureThreshold: 10
      imagePullSecrets:
      - name: {{ .Values.enterpriseConfig.imagePullSecretName }}
      {{- end }}

      {{- if .Values.coreConfig.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.coreConfig.nodeSelector | indent 8 }}
      {{- end }}
      {{- with .Values.coreConfig.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.coreConfig.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
